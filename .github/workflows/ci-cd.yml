name: Deploy FastAPI to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Validate FastAPI app
      run: |
        python -c "from main import app; print('✅ FastAPI app imported successfully')"

  deploy:
    needs: lint-and-validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e

          echo "🚀 Connecting to EC2 and starting deployment..."

          cd /home/ec2-user

          if [ ! -d "fastapi-app" ]; then
            mkdir fastapi-app
          fi

          cd fastapi-app

          echo "🛑 Stopping existing FastAPI app if running..."
          pkill -f "uvicorn" || echo "No uvicorn process found"

          if [ ! -d ".git" ]; then
            echo "📥 Cloning repository..."
            git clone https://github.com/0mer-Ashraf-ML/fastapi-sample.git .
          else
            echo "🔄 Pulling latest changes..."
            git pull origin main
          fi

          echo "🐍 Setting up virtual environment..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi

          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

          echo "🚀 Starting FastAPI app with Uvicorn..."
          nohup python3 -m uvicorn main:app --host 0.0.0.0 --port 8080 &

          echo "⏳ Waiting for FastAPI to start..."
          sleep 10

          echo "🌐 Checking health endpoint..."
          curl -s http://localhost:8080/health || echo "⚠️ Health check failed"
