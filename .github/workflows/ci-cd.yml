name: Deploy FastAPI to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings  
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Validate FastAPI app
      run: |
        # Check if the app can be imported without errors
        python -c "from main import app; print('✅ FastAPI app imported successfully')"

  deploy:
    needs: lint-and-validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        command_timeout: 10m
        script: |
          set -e  # Exit on any error
          
          echo "🚀 Starting deployment process..."
          
          # Navigate to home directory first
          cd /home/ec2-user
          echo "📁 Current directory: $(pwd)"
          
          # Create and navigate to application directory
          if [ ! -d "fastapi-app" ]; then
            echo "📁 Creating fastapi-app directory..."
            mkdir -p fastapi-app
          fi
          cd fastapi-app
          echo "📁 Application directory: $(pwd)"
          
          # Stop existing application
          echo "🛑 Stopping existing processes..."
          sudo pkill -f "uvicorn" || echo "No uvicorn processes found"
          sudo pkill -f "python.*main" || echo "No python main processes found"
          
          # Install git if not available
          echo "📦 Installing git..."
          sudo yum install git -y > /dev/null 2>&1 || echo "Git already installed"
          
          # Clone or update repository
          if [ -d ".git" ]; then
            echo "🔄 Updating existing repository..."
            git pull origin main || {
              echo "Git pull failed, doing fresh clone..."
              cd ..
              rm -rf fastapi-app
              mkdir fastapi-app
              cd fastapi-app
              git clone https://github.com/0mer-Ashraf-ML/fastapi-sample.git .
            }
          else
            echo "📥 Cloning repository..."
            git clone https://github.com/0mer-Ashraf-ML/fastapi-sample.git .
          fi
          
          # Verify files
          echo "📋 Files in directory:"
          ls -la
          
          # Check if main.py exists
          if [ ! -f "main.py" ]; then
            echo "❌ main.py not found!"
            exit 1
          fi
          
          # Install Python packages
          echo "🐍 Installing Python..."
          sudo yum update -y > /dev/null 2>&1
          sudo yum install python3 python3-pip -y > /dev/null 2>&1
          
          # Create virtual environment
          echo "🏗️ Setting up virtual environment..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate and install dependencies
          echo "📦 Installing dependencies..."
          source venv/bin/activate
          pip install --upgrade pip > /dev/null 2>&1
          pip install -r requirements.txt > /dev/null 2>&1
          
          # Start application
          echo "🚀 Starting FastAPI application..."
          export PORT=8080
          nohup python3 -m uvicorn main:app --host 0.0.0.0 --port 8080 > app.log 2>&1 &
          
          # Wait and verify
          echo "⏳ Waiting for application to start..."
          sleep 15
          
          if pgrep -f "uvicorn" > /dev/null; then
            echo "✅ Application started successfully!"
            echo "🌐 Testing health endpoint..."
            if curl -s http://localhost:8080/health; then
              echo "✅ Health check passed!"
            else
              echo "⚠️ Health check failed but app is running"
            fi
          else
            echo "❌ Application failed to start!"
            echo "📋 Application logs:"
            cat app.log || echo "No log file found"
            exit 1
          fi
          
          echo "🎉 Deployment completed successfully!"
